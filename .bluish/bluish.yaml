
var:
  project_version: "0.7.5"
  python_version: "3.12"

jobs:
  publish:

    name: Publishes the latest release of Bluish 

    runs_on: docker://python:${{ python_version }}-alpine

    steps:
      - name: Install required packages
        uses: linux/install-packages
        with:
          packages:
            - jq
            - curl

      - name: Obtain the remote package package version
        run: |
          pypi_version=$(curl -s https://pypi.org/pypi/bluish/json | jq -r .info.version)
          echo "pypi_version=$pypi_version" >> "$BLUISH_OUTPUT"
        set:
          workflow.var.pypi_version: ${{ outputs.pypi_version }}

      - name: Abort if we didn't get a valid PYPI_VERSION
        if: ${{ pypi_version == "" }}
        run: |
          echo "Didn't get a valid PYPI_VERSION"
          false

      - uses: git/checkout
        with:
          repository: https://github.com/luismedel/bluish

      - name: Abort if upload is not needed
        if: ${{ project_version == pypi_version }}
        run: |
          echo "Upload is not needed (local==${{ project_version }}, remote==${{ pypi_version }})"
          false

      - name: Update metadata in pyproject.toml
        uses: core/expand-template
        with:
          input_file: ./templates/pyproject.toml.template
          output_file: ./pyproject.toml

      - name: Update metadata in src/bluish/__main__.py
        uses: core/expand-template
        with:
          input_file: ./templates/__main__.py.template
          output_file: ./src/bluish/__main__.py

      - name: Build project
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Prepare credentials
        uses: core/upload-file
        is_sensitive: true
        with:
          source_file: ~/.pypirc
          destination_file: ~/.pypirc

      - name: Deploy to Pypi
        run: |
          python -m pip install --upgrade twine
          python -m twine upload dist/*

  create-docker:
    matrix:
      flavor: ["alpine", "ubuntu"]

    steps:
      - name: "Build Alpine Dockerfile"
        uses: core/expand-template
        if: ${{ matrix.flavor == "alpine" }}
        with:
          input: |
            FROM ${{ matrix.flavor }}:latest
            RUN apk add --no-cache \
                  bash \
                  python3~${{ python_version }} \
                  py-pip \
                  py3-virtualenv \
                  git; \
                  \
                  pip3 install bluish==${{ project_version }} --break-system-packages
          output_file: ./Dockerfile-${{ matrix.flavor }}

      - name: "Build Ubuntu Dockerfile"
        uses: core/expand-template
        if: ${{ matrix.flavor == "ubuntu" }}
        with:
          input: |
            FROM ${{ matrix.flavor }}:latest
            RUN apt-get update -qq; \
                apt-get install -qqy --no-install-recommends \
                  python${{ python_version }} \
                  python3-pip \
                  python3-venv \
                  git; \
                \
                pip3 install bluish==${{ project_version }} --break-system-packages; \
                \
                rm -rf /var/lib/apt/lists/*;
          output_file: ./Dockerfile-${{ matrix.flavor }}

      - uses: docker/build
        with:
          dockerfile: ./Dockerfile-${{ matrix.flavor }}
          context: .
          tags:
            - "luismedel/bluish-${{ matrix.flavor }}:${{ project_version }}"
            - "luismedel/bluish-${{ matrix.flavor }}:latest"

      - run: |
          docker image push -a luismedel/bluish-${{ matrix.flavor }}
          rm ./Dockerfile-${{ matrix.flavor }}
